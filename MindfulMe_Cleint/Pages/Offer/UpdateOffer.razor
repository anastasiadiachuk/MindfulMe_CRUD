@page "/updateoffer"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Entities.ViewModels.Offer
@using System.Net
@using System.Text.Json
@using Entities.ViewModels.User
@inject HttpClient Http


<h3>Update Offer</h3>

<div class="form-group">
    <label for="offerId">Offer ID:</label>
    <input id="offerId" @bind="offerId" class="form-control" style="width: 50%" />
</div>

<button type="button" class="btn btn-primary" @onclick="LoadOffer">Load Offer</button>

@if (showForm)
{
    <EditForm Model="@updateOfferViewModel" OnValidSubmit="UpdateOffer_">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="Description">Description:</label>
            <InputText id="Description" @bind-Value="updateOfferViewModel.Description" class="form-control" style="width: 50%" />
        </div>

        <div class="form-group">
            <label for="Content">Content:</label>
            <InputTextArea id="Content" @bind-Value="updateOfferViewModel.Content" class="form-control" style="width: 50%" />
        </div>

        <button type="submit" class="btn btn-primary">Update Offer</button>
    </EditForm>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3" role="alert">
        @successMessage
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

@code {
    private int offerId;
    private bool showForm;
    private UpdateOfferViewModel updateOfferViewModel = new UpdateOfferViewModel();
    private string successMessage;
    private string errorMessage;

    private async Task LoadOffer()
    {
        if (offerId <= 0)
        {
            return;
        }

        var response = await Http.GetAsync($"https://localhost:7286/get_offer/{offerId}");

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            updateOfferViewModel = JsonSerializer.Deserialize<UpdateOfferViewModel>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            showForm = true;
        }
        else
        {
            errorMessage = "Offer not found.";
            var timer = new System.Timers.Timer(5000);
            timer.Elapsed += (sender, e) => { errorMessage = string.Empty; StateHasChanged(); };
            timer.Start();
        }

    }

    private async Task UpdateOffer_()
    {
        var response = await Http.PutAsJsonAsync($"https://localhost:7286/update_offer/{offerId}", updateOfferViewModel);

        if (response.IsSuccessStatusCode)
        {
            successMessage = "Offer updated successfully!";
            offerId = 0;
            var timer = new System.Timers.Timer(5000);
            timer.Elapsed += (sender, e) => { successMessage = string.Empty; StateHasChanged(); };
            timer.Start();
        }
        else if (response.StatusCode == HttpStatusCode.NotFound)
        {
            errorMessage = "Offer not found.";
            var timer = new System.Timers.Timer(5000);
            timer.Elapsed += (sender, e) => { errorMessage = string.Empty; StateHasChanged(); };
            timer.Start();
        }
        else
        {
            errorMessage = "An error occurred while updating the offer.";
        }
    }
}
