@page "/updatearticle"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Entities.ViewModels.Article
@using System.Net
@using System.Text.Json
@inject HttpClient Http
<h3>Update Article</h3>

<div class="form-group">
    <label for="articleId">Article ID:</label>
    <input id="articleId" @bind="articleId" class="form-control" style="width: 50%" />
</div>

<button type="button" class="btn btn-primary" @onclick="LoadArticle">Load Article</button>

@if (showForm)
{
    <EditForm Model="@updateArticleViewModel" OnValidSubmit="UpdateArticle_">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="Title">Title:</label>
            <InputText id="Title" @bind-Value="updateArticleViewModel.Title" class="form-control" style="width: 50%" />
        </div>

        <div class="form-group">
            <label for="Description">Description:</label>
            <InputText id="Description" @bind-Value="updateArticleViewModel.Description" class="form-control" style="width: 50%" />
        </div>

        <div class="form-group">
            <label for="ImageUrl">Image URL:</label>
            <InputText id="ImageUrl" @bind-Value="updateArticleViewModel.ImageUrl" class="form-control" style="width: 50%" />
        </div>

        <div class="form-group">
            <label for="Content">Content:</label>
            <InputTextArea id="Content" @bind-Value="updateArticleViewModel.Content" class="form-control" style="width: 50%" />
        </div>

        <div class="form-group">
            <label for="AuthorUsername">Author Username:</label>
            <InputText id="AuthorUsername" @bind-Value="updateArticleViewModel.AuthorUsername" class="form-control" style="width: 50%" />
        </div>

        <button type="submit" class="btn btn-primary">Update Article</button>
    </EditForm>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3" role="alert">
        @successMessage
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

@code {
    private int articleId;
    private bool showForm;
    private UpdateArticleViewModel updateArticleViewModel = new UpdateArticleViewModel();
    private string successMessage;
    private string errorMessage;

    private async Task LoadArticle()
    {
        if (articleId <= 0)
        {
            return;
        }

        var response = await Http.GetAsync($"https://localhost:7286/get_article/{articleId}");

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            updateArticleViewModel = JsonSerializer.Deserialize<UpdateArticleViewModel>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            showForm = true;
        }
        else
        {
            errorMessage = "Article not found.";
            var timer = new System.Timers.Timer(5000);
            timer.Elapsed += (sender, e) => { errorMessage = string.Empty; StateHasChanged(); };
            timer.Start();
        }
    }


    private async Task UpdateArticle_()
    {
        var response = await Http.PutAsJsonAsync($"https://localhost:7286/update_article/{articleId}", updateArticleViewModel);

        if (response.IsSuccessStatusCode)
        {
            successMessage = "Article updated successfully!";
            articleId = 0; // Очистка поля ввода

            // Запуск таймера для скрытия сообщения через 5 секунд
            var timer = new System.Timers.Timer(5000);
            timer.Elapsed += (sender, e) => { successMessage = string.Empty; StateHasChanged(); };
            timer.Start();
        }
        else if (response.StatusCode == HttpStatusCode.NotFound)
        {
            errorMessage = "Article not found.";
            var timer = new System.Timers.Timer(5000);
            timer.Elapsed += (sender, e) => { errorMessage = string.Empty; StateHasChanged(); };
            timer.Start();
        }
        else
        {
            // Обработка других ошибок
            errorMessage = "An error occurred while updating the article.";
        }
    }
}
