@page "/updateuser"
@using Microsoft.AspNetCore.Components.Forms
@using Entities.ViewModels.User
@using Entities.Enums
@using System.Text.Json
@using System.Text
@using System.Net
@inject HttpClient Http

<h3>Update User</h3>

<div class="form-group">
    <label for="userId">User ID:</label>
    <input id="userId" @bind="userId" class="form-control" style="width: 50%" />
</div>

<button type="button" class="btn btn-primary" @onclick="LoadUser">Load User</button>

@if (userLoaded)
{
    <EditForm Model="@updateUserViewModel" OnValidSubmit="UpdateUser_">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="Email">Email:</label>
            <InputText id="Email" @bind-Value="updateUserViewModel.Email" class="form-control" style="width: 50%" />
        </div>

        <div class="form-group">
            <label for="Password">Password:</label>
            <InputText id="Password" @bind-Value="updateUserViewModel.Password" class="form-control" style="width: 50%" />
        </div>

        <div class="form-group">
            <label for="UserName">User Name:</label>
            <InputText id="UserName" @bind-Value="updateUserViewModel.UserName" class="form-control" style="width: 50%" />
        </div>

        <div class="form-group">
            <label for="UserType">User Type:</label>
            <InputSelect id="UserType" @bind-Value="updateUserViewModel.UserType" class="form-control" style="width: 50%">
                @foreach (UserType userType in Enum.GetValues(typeof(UserType)))
                {
                    <option value="@userType">@userType</option>
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-success">Update User</button>
    </EditForm>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3" role="alert">
        @successMessage
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}

@code {
    private int userId;
    private UpdateUserViewModel updateUserViewModel = new UpdateUserViewModel();
    private bool userLoaded;
    private string successMessage;
    private string errorMessage;

    private async Task LoadUser()
    {
        if (userId <= 0)
        {
            return;
        }

        var response = await Http.GetAsync($"https://localhost:7286/get_user/{userId}");

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            updateUserViewModel = JsonSerializer.Deserialize<UpdateUserViewModel>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            userLoaded = true;
        }
        else
        {
            errorMessage = "User not found.";
            var timer = new System.Timers.Timer(5000);
            timer.Elapsed += (sender, e) => { errorMessage = string.Empty; StateHasChanged(); };
            timer.Start();
            userLoaded = false;
        }
    }

    private async Task UpdateUser_()
    {
        if (userId <= 0)
        {
            return;
        }

        var response = await Http.PutAsync($"https://localhost:7286/update_user/{userId}", new StringContent(JsonSerializer.Serialize(updateUserViewModel), Encoding.UTF8, "application/json"));

        if (response.IsSuccessStatusCode)
        {
            successMessage = "User updated successfully!";
            userId = 0;
            var timer = new System.Timers.Timer(5000);
            timer.Elapsed += (sender, e) => { successMessage = string.Empty; StateHasChanged(); };
            timer.Start();
        }
        else if (response.StatusCode == HttpStatusCode.NotFound)
        {
            errorMessage = "User not found.";
            var timer = new System.Timers.Timer(5000);
            timer.Elapsed += (sender, e) => { errorMessage = string.Empty; StateHasChanged(); };
            timer.Start();
        }
        else
        {
            errorMessage = "An error occurred while updating the user.";
        }
    }
}
